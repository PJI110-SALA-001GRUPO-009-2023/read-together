generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Clube {
  idClube       Int             @id @unique(map: "id_clube_UNIQUE") @default(autoincrement()) @map("id_clube")
  nome          String          @db.VarChar(100)
  subtitulo     String?         @db.VarChar(100)
  descricao     String          @db.VarChar(200)
  imagem        Bytes?          @db.Blob
  imagemUrl     String?         @map("imagem_url") @db.VarChar(2048)
  dataCriacao   DateTime?       @map("dt_criacao") @db.Date
  categoria     String?         @db.VarChar(100)
  site          String?         @db.VarChar(2048)
  whatsapp      String?         @db.VarChar(2048)
  telegram      String?         @db.VarChar(2048)
  redesSociais String?         @db.Text @map("redes_sociais")
  leitura       Leitura[]
  membroDoClube MembroDoClube[]

  @@map("CLUBE")
}

model GeneroLivro {
  codGenero Int     @id @unique(map: "cod_genero_UNIQUE") @default(autoincrement()) @map("cod_genero")
  nome      String? @db.VarChar(45)
  descricao String? @db.VarChar(200)
  livro     Livro[]

  @@map("GENEROLIVRO")
}

model Leitura {
  idLeitura      Int        @id @unique(map: "id_leitura_UNIQUE") @default(autoincrement()) @map("id_leitura")
  dataInicio     DateTime   @map("dt_inicio") @db.DateTime(0)
  dataFim        DateTime   @map("dt_fim") @db.DateTime(0)
  idClube        Int        @map("CLUBE_id_clube")
  idLivro Int @map("LIVRO_id_livro")
  clube          Clube      @relation(fields: [idClube], references: [idClube], onDelete: NoAction, onUpdate: NoAction, map: "fk_LEITURA_CLUBE1")
  livro          Livro      @relation(fields: [idLivro], references: [idLivro], onDelete: NoAction, onUpdate: NoAction, map: "fk_LEITURA_LIVRO1")
  postagem       Postagem[]

  @@index([idClube], map: "fk_LEITURA_CLUBE1_idx")
  @@index([idLivro], map: "fk_LEITURA_LIVRO1_idx")
  @@map("LEITURA")
}

model Livro {
  idLivro       Int         @id @unique(map: "id_livro_UNIQUE") @default(autoincrement()) @map("id_livro")
  isbn           Int?        @unique(map: "isbn_UNIQUE")
  titulo         String      @db.VarChar(45)
  edicao         Int?
  volume         Int?
  autor          String      @db.VarChar(45)
  sinopse        String      @db.VarChar(450)
  dataPublicacao DateTime?   @map("dt_publicacao") @db.Date
  imagemCapa     Bytes?      @map("img_capa") @db.Blob
  imagemCapaUrl  String?     @map("img_capa_url") @db.VarChar(2048)
  codGenero      Int         @map("GENEROLIVRO_cod_genero")
  LIVROcol       String?     @db.VarChar(45)
  Leitura        Leitura[]
  generoLivro    GeneroLivro @relation(fields: [codGenero], references: [codGenero], onDelete: NoAction, onUpdate: NoAction, map: "fk_LIVRO_GENEROLIVRO1")

  @@index([codGenero], map: "fk_LIVRO_GENEROLIVRO1_idx")
  @@map("LIVRO")
}

model MembroDoClube {
  idClube      Int            @map("CLUBE_id_clube")
  idUsuario    Int            @map("USUARIO_id_usuario")
  codRole      Int            @map("ROLE_cod_role")
  LISTA_ESPERA ListaEspera[]
  clube        Clube          @relation(fields: [idClube], references: [idClube], onDelete: NoAction, onUpdate: NoAction, map: "fk_MEMBROS_CLUBE1")
  role         Role           @relation(fields: [codRole], references: [codRole], onDelete: NoAction, onUpdate: NoAction, map: "fk_MEMBROS_ROLE1")
  usuario      Usuario        @relation(fields: [idUsuario], references: [idUsuario], onDelete: NoAction, onUpdate: NoAction, map: "fk_MEMBROS_USUARIO1")

  @@id([idClube, idUsuario, codRole])
  @@index([idClube], map: "fk_MEMBRO_CLUBE1_idx")
  @@index([codRole], map: "fk_MEMBRO_ROLE1_idx")
  @@index([idUsuario], map: "fk_MEMBRO_USUARIO1_idx")
  @@map("MEMBRO_DO_CLUBE")
}

model Postagem {
  idPost      Int      @id @unique(map: "id_post_UNIQUE") @default(autoincrement()) @map("id_post")
  dataCriacao DateTime @map("dt_criacao") @db.Date
  conteudo    String   @db.VarChar(500)
  idLeitura   Int      @map("LEITURA_id_leitura")
  idUsuario   Int      @map("USUARIO_id_usuario")
  leitura     Leitura  @relation(fields: [idLeitura], references: [idLeitura], onDelete: NoAction, onUpdate: NoAction, map: "fk_POSTAGEM_LEITURA1")
  usuario     Usuario  @relation(fields: [idUsuario], references: [idUsuario], onDelete: NoAction, onUpdate: NoAction, map: "fk_POSTAGEM_USUARIO1")

  @@index([idLeitura], map: "fk_POSTAGEM_LEITURA1_idx")
  @@index([idUsuario], map: "fk_POSTAGEM_USUARIO1_idx")
  @@map("POSTAGEM")
}

model Role {
  codRole       Int             @id @unique(map: "cod_role_UNIQUE") @default(autoincrement()) @map("cod_role")
  nome          String          @unique(map: "nome_UNIQUE") @db.VarChar(45)
  descricao     String?         @db.VarChar(200)
  membroDoClube MembroDoClube[]

  @@map("ROLE")
}

model Usuario {
  idUsuario      Int             @id @unique(map: "id_usuario_UNIQUE") @default(autoincrement()) @map("id_usuario")
  nome           String          @db.VarChar(45)
  email          String          @unique(map: "email_UNIQUE") @db.VarChar(255)
  dataNascimento DateTime?       @map("dt_nascimento") @db.Date
  bio            String?         @db.VarChar(500)
  imagem         Bytes?          @db.Blob
  imagemUrl      String?         @map("imagem_url") @db.VarChar(2048)
  senha          String          @db.VarChar(60)
  membroDoClube  MembroDoClube[]
  postagem       Postagem[]

  @@map("USUARIO")
}

model ListaEspera {
  idListaEspera                            Int           @id @unique(map: "id_listaespera_UNIQUE") @default(autoincrement()) @map("id_listaespera")
  emailConvidado                           String        @unique(map: "email_UNIQUE") @db.VarChar(255) @map("convidado_email")
  tipo                                      String        @db.VarChar(45)
  idClube            Int @map("MEMBRO_DO_CLUBE_CLUBE_id_clube")
  idModerador Int @map("MEMBRO_DO_CLUBE_ModeradorAdmin_id_usuario")
  roleConvidado             Int @map("MEMBRO_DO_CLUBE_ROLE_cod_role")
  codStatusEspera                  Int @map("STATUS_ESPERA_cod_status")
  statusEspera                             StatusEspera @relation(fields: [codStatusEspera], references: [codStatus], onDelete: NoAction, onUpdate: NoAction, map: "fk_LISTA_ESPERA_STATUS_ESPERA1")
  membroDoClube                           MembroDoClube @relation(fields: [idClube, idModerador, roleConvidado], references: [idClube, idUsuario, codRole], onDelete: NoAction, onUpdate: NoAction, map: "fk_WAITLIST_MEMBRO_DO_CLUBE1")

  @@index([idClube, idModerador, roleConvidado], map: "fk_LISTA_ESPERA_MEMBRO_DO_CLUBE1_idx")
  @@index([codStatusEspera], map: "fk_LISTA_ESPERA_STATUS_ESPERA1_idx")
	@@map("LISTA_ESPERA")
}

model StatusEspera {
  codStatus   Int            @id @unique(map: "cod_status_UNIQUE") @map("cod_status")
  status       String         @db.VarChar(45)
  descricao    String?        @db.VarChar(200)
  listaEspera ListaEspera[]
	@@map("STATUS_ESPERA")
}
